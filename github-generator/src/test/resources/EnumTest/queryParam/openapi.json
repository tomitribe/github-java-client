{
  "openapi": "3.0.3",
  "info": {
    "version": "0.0.5",
    "title": "GitHub v3 REST API",
    "description": "GitHub's v3 REST API.",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT"
    },
    "termsOfService": "https://docs.github.com/articles/github-terms-of-service",
    "contact": {
      "name": "Support",
      "url": "https://support.github.com"
    }
  },
  "tags": [
    {
      "name": "issues",
      "description": "Endpoints that give information about the API."
    }
  ],
  "servers": [
    {
      "url": "https://api.github.com"
    }
  ],
  "externalDocs": {
    "description": "GitHub v3 REST API",
    "url": "https://developer.github.com/v3/"
  },
  "paths": {
    "/issues": {
      "get": {
        "summary": "List issues assigned to the authenticated user",
        "description": "List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not\nnecessarily assigned to you. See the [Parameters table](https://developer.github.com/v3/issues/#parameters) for more\ninformation.\n\n\n**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe `pull_request` key. Be aware that the `id` of a pull request returned from \"Issues\" endpoints will be an _issue id_. To find out the pull\nrequest id, use the \"[List pull requests](https://developer.github.com/v3/pulls/#list-pull-requests)\" endpoint.",
        "tags": [
          "issues"
        ],
        "operationId": "issues/list",
        "externalDocs": {
          "description": "API method documentation",
          "url": "https://developer.github.com/v3/issues/#list-issues-assigned-to-the-authenticated-user"
        },
        "parameters": [
          {
            "name": "filter",
            "description": "Indicates which sorts of issues to return. Can be one of:  \n\\* `assigned`: Issues assigned to you  \n\\* `created`: Issues created by you  \n\\* `mentioned`: Issues mentioning you  \n\\* `subscribed`: Issues you're subscribed to updates for  \n\\* `all`: All issues the authenticated user can see, regardless of participation or creation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "all"
              ],
              "default": "assigned"
            }
          },
          {
            "name": "state",
            "description": "Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            }
          },
          {
            "name": "sort",
            "description": "What to sort results by. Can be either `created`, `updated`, `comments`.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content. The request was successful, but there is no additional information to send in the response."
          }
        },
        "x-github": {
          "githubCloudOnly": false,
          "enabledForGitHubApps": false,
          "category": "issues",
          "subcategory": null
        }
      }
    }
  }
}